// Generated by gencpp from file deeporange14_msgs/MobilityMsg.msg
// DO NOT EDIT!


#ifndef DEEPORANGE14_MSGS_MESSAGE_MOBILITYMSG_H
#define DEEPORANGE14_MSGS_MESSAGE_MOBILITYMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace deeporange14_msgs
{
template <class ContainerAllocator>
struct MobilityMsg_
{
  typedef MobilityMsg_<ContainerAllocator> Type;

  MobilityMsg_()
    : header()
    , left_torque(0.0)
    , right_torque(0.0)
    , left_brkPressure(0)
    , right_brkPressure(0)
    , au_state(0)
    , brake_enable(false)  {
    }
  MobilityMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left_torque(0.0)
    , right_torque(0.0)
    , left_brkPressure(0)
    , right_brkPressure(0)
    , au_state(0)
    , brake_enable(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _left_torque_type;
  _left_torque_type left_torque;

   typedef double _right_torque_type;
  _right_torque_type right_torque;

   typedef uint8_t _left_brkPressure_type;
  _left_brkPressure_type left_brkPressure;

   typedef uint8_t _right_brkPressure_type;
  _right_brkPressure_type right_brkPressure;

   typedef uint8_t _au_state_type;
  _au_state_type au_state;

   typedef uint8_t _brake_enable_type;
  _brake_enable_type brake_enable;





  typedef boost::shared_ptr< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> const> ConstPtr;

}; // struct MobilityMsg_

typedef ::deeporange14_msgs::MobilityMsg_<std::allocator<void> > MobilityMsg;

typedef boost::shared_ptr< ::deeporange14_msgs::MobilityMsg > MobilityMsgPtr;
typedef boost::shared_ptr< ::deeporange14_msgs::MobilityMsg const> MobilityMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deeporange14_msgs::MobilityMsg_<ContainerAllocator1> & lhs, const ::deeporange14_msgs::MobilityMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left_torque == rhs.left_torque &&
    lhs.right_torque == rhs.right_torque &&
    lhs.left_brkPressure == rhs.left_brkPressure &&
    lhs.right_brkPressure == rhs.right_brkPressure &&
    lhs.au_state == rhs.au_state &&
    lhs.brake_enable == rhs.brake_enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deeporange14_msgs::MobilityMsg_<ContainerAllocator1> & lhs, const ::deeporange14_msgs::MobilityMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deeporange14_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0eaaf6b23ead9b732ddff611e74f7ec";
  }

  static const char* value(const ::deeporange14_msgs::MobilityMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0eaaf6b23ead9b7ULL;
  static const uint64_t static_value2 = 0x32ddff611e74f7ecULL;
};

template<class ContainerAllocator>
struct DataType< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deeporange14_msgs/MobilityMsg";
  }

  static const char* value(const ::deeporange14_msgs::MobilityMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This represents a vector in free space -- currently defined to hold the left and right track #velocities\n"
"Header header\n"
"\n"
"float64 left_torque\n"
"float64 right_torque\n"
"uint8 left_brkPressure\n"
"uint8 right_brkPressure\n"
"uint8 au_state \n"
"bool brake_enable\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::deeporange14_msgs::MobilityMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left_torque);
      stream.next(m.right_torque);
      stream.next(m.left_brkPressure);
      stream.next(m.right_brkPressure);
      stream.next(m.au_state);
      stream.next(m.brake_enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MobilityMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deeporange14_msgs::MobilityMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deeporange14_msgs::MobilityMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_torque: ";
    Printer<double>::stream(s, indent + "  ", v.left_torque);
    s << indent << "right_torque: ";
    Printer<double>::stream(s, indent + "  ", v.right_torque);
    s << indent << "left_brkPressure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_brkPressure);
    s << indent << "right_brkPressure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_brkPressure);
    s << indent << "au_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.au_state);
    s << indent << "brake_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPORANGE14_MSGS_MESSAGE_MOBILITYMSG_H
