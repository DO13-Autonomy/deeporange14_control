// Generated by gencpp from file deeporange14_msgs/PIDComponentsMsg.msg
// DO NOT EDIT!


#ifndef DEEPORANGE14_MSGS_MESSAGE_PIDCOMPONENTSMSG_H
#define DEEPORANGE14_MSGS_MESSAGE_PIDCOMPONENTSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace deeporange14_msgs
{
template <class ContainerAllocator>
struct PIDComponentsMsg_
{
  typedef PIDComponentsMsg_<ContainerAllocator> Type;

  PIDComponentsMsg_()
    : P_Vx(0.0)
    , I_Vx(0.0)
    , D_Vx(0.0)
    , P_Wz(0.0)
    , I_Wz(0.0)
    , D_Wz(0.0)  {
    }
  PIDComponentsMsg_(const ContainerAllocator& _alloc)
    : P_Vx(0.0)
    , I_Vx(0.0)
    , D_Vx(0.0)
    , P_Wz(0.0)
    , I_Wz(0.0)
    , D_Wz(0.0)  {
  (void)_alloc;
    }



   typedef double _P_Vx_type;
  _P_Vx_type P_Vx;

   typedef double _I_Vx_type;
  _I_Vx_type I_Vx;

   typedef double _D_Vx_type;
  _D_Vx_type D_Vx;

   typedef double _P_Wz_type;
  _P_Wz_type P_Wz;

   typedef double _I_Wz_type;
  _I_Wz_type I_Wz;

   typedef double _D_Wz_type;
  _D_Wz_type D_Wz;





  typedef boost::shared_ptr< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PIDComponentsMsg_

typedef ::deeporange14_msgs::PIDComponentsMsg_<std::allocator<void> > PIDComponentsMsg;

typedef boost::shared_ptr< ::deeporange14_msgs::PIDComponentsMsg > PIDComponentsMsgPtr;
typedef boost::shared_ptr< ::deeporange14_msgs::PIDComponentsMsg const> PIDComponentsMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator1> & lhs, const ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator2> & rhs)
{
  return lhs.P_Vx == rhs.P_Vx &&
    lhs.I_Vx == rhs.I_Vx &&
    lhs.D_Vx == rhs.D_Vx &&
    lhs.P_Wz == rhs.P_Wz &&
    lhs.I_Wz == rhs.I_Wz &&
    lhs.D_Wz == rhs.D_Wz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator1> & lhs, const ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deeporange14_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc85b3278733449a3886e64952b6b2bc";
  }

  static const char* value(const ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc85b3278733449aULL;
  static const uint64_t static_value2 = 0x3886e64952b6b2bcULL;
};

template<class ContainerAllocator>
struct DataType< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deeporange14_msgs/PIDComponentsMsg";
  }

  static const char* value(const ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 P_Vx\n"
"float64 I_Vx\n"
"float64 D_Vx\n"
"float64 P_Wz\n"
"float64 I_Wz\n"
"float64 D_Wz\n"
;
  }

  static const char* value(const ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.P_Vx);
      stream.next(m.I_Vx);
      stream.next(m.D_Vx);
      stream.next(m.P_Wz);
      stream.next(m.I_Wz);
      stream.next(m.D_Wz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PIDComponentsMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deeporange14_msgs::PIDComponentsMsg_<ContainerAllocator>& v)
  {
    s << indent << "P_Vx: ";
    Printer<double>::stream(s, indent + "  ", v.P_Vx);
    s << indent << "I_Vx: ";
    Printer<double>::stream(s, indent + "  ", v.I_Vx);
    s << indent << "D_Vx: ";
    Printer<double>::stream(s, indent + "  ", v.D_Vx);
    s << indent << "P_Wz: ";
    Printer<double>::stream(s, indent + "  ", v.P_Wz);
    s << indent << "I_Wz: ";
    Printer<double>::stream(s, indent + "  ", v.I_Wz);
    s << indent << "D_Wz: ";
    Printer<double>::stream(s, indent + "  ", v.D_Wz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPORANGE14_MSGS_MESSAGE_PIDCOMPONENTSMSG_H
